
// You can write more code here

/* START OF COMPILED CODE */

import FixedToCameraComp from "../components/FixedToCameraComp.js";
import ParallaxComp from "../components/ParallaxComp.js";
import Bee from "../prefabs/Bee.js";
import Plant from "../prefabs/Plant.js";
import Slug from "../prefabs/Slug.js";
import Chest from "../prefabs/Chest.js";
import Star from "../prefabs/Star.js";
import Carrot from "../prefabs/Carrot.js";
import Player from "../prefabs/Player.js";
import SlugZone from "../prefabs/SlugZone.js";
/* START-USER-IMPORTS */
import EnemyDeath from "../prefabs/EnemyDeath.js";
import LootStar from "../prefabs/LootStar.js";
/* END-USER-IMPORTS */

export default class Level extends Phaser.Scene {

	constructor() {
		super("Level");

		/* START-USER-CTR-CODE */
		// Write your code here.
		/* END-USER-CTR-CODE */
	}

	/** @returns {void} */
	editorCreate() {

		// levelMap
		this.cache.tilemap.add("levelMap_adbad958-e0fa-4083-a2bc-454b442abaf7", {
			format: 1,
			data: {
				width: 24,
				height: 15,
				orientation: "orthogonal",
				tilewidth: 16,
				tileheight: 16,
				tilesets: [
					{
						columns: 8,
						margin: 0,
						spacing: 0,
						tilewidth: 16,
						tileheight: 16,
						tilecount: 8,
						firstgid: 1,
						image: "collisions",
						name: "collisions",
						imagewidth: 128,
						imageheight: 16,
					},
					{
						columns: 20,
						margin: 0,
						spacing: 0,
						tilewidth: 16,
						tileheight: 16,
						tilecount: 240,
						firstgid: 9,
						image: "tileset",
						name: "tileset",
						imagewidth: 320,
						imageheight: 192,
					},
				],
				layers: [
					{
						type: "tilelayer",
						name: "mainLayer",
						width: 160,
						height: 25,
						opacity: 1,
						data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 237, 217, 217, 167, 167, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 218, 218, 218, 218, 219, 0, 0, 0, 0, 0, 0, 157, 157, 157, 157, 217, 217, 167, 217, 217, 217, 217, 217, 167, 212, 213, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 217, 237, 217, 217, 217, 219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 213, 212, 213, 212, 213, 209, 210, 212, 213, 212, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 58, 0, 0, 0, 0, 0, 0, 236, 237, 217, 187, 187, 217, 217, 217, 217, 217, 217, 217, 217, 217, 167, 218, 218, 218, 218, 219, 0, 0, 0, 0, 0, 0, 209, 210, 157, 157, 217, 237, 187, 217, 217, 217, 217, 167, 187, 232, 233, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 217, 237, 217, 217, 217, 219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 233, 232, 233, 232, 233, 229, 230, 232, 233, 232, 233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 213, 209, 210, 212, 213, 0, 0, 0, 0, 0, 216, 217, 167, 217, 217, 237, 217, 217, 217, 237, 217, 217, 167, 187, 218, 218, 218, 237, 239, 0, 0, 0, 0, 0, 0, 229, 230, 157, 157, 217, 217, 237, 217, 217, 217, 217, 187, 237, 212, 213, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 217, 217, 217, 217, 237, 217, 199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 233, 229, 230, 232, 233, 0, 0, 0, 0, 0, 216, 217, 187, 217, 217, 217, 217, 217, 217, 217, 217, 217, 187, 217, 217, 218, 237, 239, 0, 0, 0, 0, 0, 0, 0, 157, 157, 157, 209, 210, 217, 217, 217, 188, 217, 217, 237, 167, 232, 233, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 157, 217, 217, 217, 217, 217, 237, 199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2684354794, 2684354774, 2684354794, 2684354774, 2684354794, 2684354774, 0, 0, 0, 0, 58, 0, 0, 0, 212, 213, 212, 213, 0, 0, 0, 0, 0, 0, 0, 0, 216, 197, 217, 217, 217, 217, 167, 217, 217, 217, 217, 217, 217, 217, 167, 217, 237, 239, 0, 0, 0, 0, 0, 0, 0, 0, 157, 157, 157, 229, 230, 217, 217, 217, 217, 217, 217, 217, 187, 212, 213, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 212, 213, 212, 213, 212, 213, 212, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 13, 14, 13, 14, 15, 232, 233, 232, 233, 0, 0, 0, 0, 0, 0, 0, 196, 197, 217, 217, 217, 217, 167, 187, 167, 217, 217, 217, 217, 217, 217, 187, 217, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 210, 157, 157, 157, 157, 157, 212, 213, 167, 217, 217, 217, 232, 233, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 232, 233, 232, 233, 232, 233, 232, 233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 21, 76, 78, 78, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 217, 217, 217, 217, 217, 217, 187, 167, 187, 217, 217, 217, 217, 217, 217, 217, 219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 229, 230, 157, 212, 213, 212, 213, 232, 233, 187, 217, 217, 217, 212, 213, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 136, 137, 137, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 217, 217, 217, 217, 237, 217, 217, 187, 217, 217, 237, 217, 217, 217, 217, 217, 237, 199, 0, 0, 0, 0, 0, 0, 76, 77, 78, 157, 157, 157, 232, 233, 232, 233, 167, 217, 217, 237, 217, 217, 232, 233, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 137, 137, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 237, 217, 167, 217, 217, 217, 217, 217, 217, 217, 217, 217, 167, 217, 217, 217, 217, 219, 0, 0, 0, 0, 0, 95, 96, 97, 98, 157, 212, 213, 157, 217, 217, 217, 187, 217, 167, 217, 209, 210, 212, 213, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 137, 137, 139, 199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 217, 167, 187, 217, 167, 217, 217, 217, 217, 217, 217, 217, 187, 237, 217, 217, 237, 239, 0, 0, 0, 0, 0, 115, 116, 117, 118, 157, 232, 233, 157, 217, 217, 217, 217, 217, 187, 217, 229, 230, 232, 233, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 77, 78, 78, 99, 17, 19, 12, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 137, 137, 139, 217, 199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 197, 217, 187, 167, 217, 187, 217, 217, 217, 217, 217, 217, 217, 237, 237, 217, 217, 237, 199, 0, 0, 0, 0, 0, 0, 136, 117, 209, 210, 157, 209, 210, 217, 217, 217, 217, 217, 212, 213, 212, 213, 212, 213, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 97, 98, 98, 119, 120, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 137, 137, 139, 217, 217, 199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 78, 77, 157, 79, 0, 0, 0, 0, 0, 75, 76, 77, 78, 77, 157, 187, 217, 217, 217, 217, 217, 217, 217, 167, 217, 166, 217, 217, 217, 217, 198, 199, 0, 0, 0, 0, 0, 136, 117, 229, 230, 157, 229, 230, 217, 217, 217, 217, 217, 232, 233, 232, 233, 232, 233, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 157, 117, 117, 99, 100, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 137, 137, 139, 217, 217, 219, 0, 0, 0, 0, 0, 0, 57, 57, 57, 58, 57, 57, 58, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 58, 0, 57, 0, 0, 58, 0, 76, 78, 77, 78, 79, 0, 0, 0, 57, 58, 0, 57, 57, 57, 136, 98, 97, 157, 139, 0, 0, 0, 0, 0, 95, 96, 97, 98, 97, 98, 77, 78, 157, 157, 77, 157, 217, 217, 187, 217, 217, 157, 78, 78, 78, 78, 78, 77, 79, 0, 0, 0, 136, 117, 117, 157, 157, 157, 212, 213, 212, 213, 212, 213, 212, 213, 212, 213, 212, 213, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 147, 147, 147, 147, 147, 147, 147, 117, 117, 117, 117, 119, 120, 0, 32, 0, 0, 10, 10, 10, 10, 10, 10, 10, 10, 136, 137, 137, 139, 217, 217, 219, 0, 0, 57, 57, 58, 0, 70, 77, 77, 78, 77, 78, 77, 77, 78, 72, 0, 0, 57, 57, 57, 58, 0, 57, 57, 57, 58, 0, 0, 0, 0, 0, 0, 0, 57, 58, 0, 0, 77, 78, 77, 78, 77, 157, 157, 78, 77, 78, 157, 98, 97, 98, 117, 78, 77, 78, 78, 77, 157, 77, 78, 77, 98, 98, 98, 98, 139, 0, 0, 0, 0, 0, 115, 116, 117, 117, 117, 117, 97, 98, 157, 98, 97, 139, 167, 217, 166, 217, 167, 136, 98, 98, 98, 98, 98, 97, 139, 0, 0, 115, 116, 117, 117, 209, 210, 157, 232, 233, 232, 233, 232, 233, 232, 233, 232, 233, 232, 233, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 61, 63, 63, 61, 63, 63, 61, 136, 117, 117, 117, 99, 100, 0, 32, 0, 0, 76, 78, 77, 78, 77, 78, 77, 77, 137, 137, 137, 137, 77, 78, 77, 78, 77, 78, 77, 78, 77, 90, 117, 97, 98, 97, 98, 97, 97, 98, 92, 77, 78, 77, 78, 77, 77, 78, 77, 78, 77, 78, 77, 77, 77, 78, 77, 78, 77, 78, 78, 77, 78, 97, 98, 97, 98, 97, 98, 157, 98, 97, 98, 98, 117, 117, 117, 117, 98, 97, 98, 98, 97, 98, 97, 98, 97, 98, 98, 98, 98, 139, 10, 10, 10, 10, 10, 10, 136, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 187, 217, 217, 166, 187, 136, 117, 117, 138, 117, 117, 117, 139, 10, 10, 10, 136, 117, 117, 229, 230, 157, 212, 213, 212, 213, 212, 213, 212, 213, 212, 213, 212, 213, 117, 117, 117, 117, 157, 117, 117, 117, 117, 139, 81, 83, 83, 81, 83, 83, 81, 136, 117, 117, 157, 119, 146, 146, 146, 146, 146, 157, 98, 97, 98, 97, 98, 97, 97, 137, 137, 137, 137, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 117, 117, 117, 117, 117, 117, 117, 117, 117, 97, 98, 97, 98, 97, 97, 98, 97, 98, 97, 98, 97, 97, 97, 98, 97, 98, 97, 98, 98, 97, 98, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 157, 78, 78, 78, 78, 78, 78, 157, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 186, 186, 186, 186, 166, 136, 117, 117, 138, 117, 157, 157, 117, 157, 157, 157, 117, 117, 157, 157, 157, 157, 232, 233, 232, 233, 232, 233, 232, 233, 232, 233, 232, 233, 147, 147, 147, 147, 157, 157, 147, 147, 157, 147, 101, 166, 166, 101, 166, 166, 101, 147, 147, 147, 147, 157, 166, 167, 166, 166, 166, 136, 157, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 186, 167, 186, 186, 186, 147, 147, 147, 148, 147, 157, 157, 147, 157, 147, 147, 157, 147, 147, 212, 213, 212, 213, 63, 63, 63, 61, 63, 63, 61, 63, 63, 61, 63, 63, 61, 63, 63, 61, 63, 63, 61, 63, 63, 101, 166, 166, 101, 166, 166, 101, 63, 63, 65, 166, 167, 186, 187, 166, 167, 166, 136, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 138, 117, 117, 117, 117, 117, 117, 138, 117, 117, 117, 117, 117, 117, 117, 139, 186, 187, 186, 166, 186, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 232, 233, 232, 233, 186, 186, 186, 81, 83, 83, 81, 83, 83, 81, 83, 83, 81, 83, 83, 81, 83, 83, 81, 83, 83, 101, 166, 166, 101, 166, 166, 101, 83, 83, 85, 186, 187, 166, 166, 166, 187, 166, 136, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 157, 147, 147, 148, 147, 147, 147, 147, 147, 147, 148, 157, 117, 117, 117, 117, 117, 117, 139, 186, 186, 186, 186, 167, 186, 186, 186, 186, 186, 167, 186, 186, 186, 186, 186, 186, 186, 186, 141, 142, 143, 144, 166, 166, 166, 101, 166, 166, 101, 166, 166, 101, 166, 166, 101, 166, 166, 101, 166, 166, 101, 166, 166, 101, 166, 166, 101, 166, 166, 101, 166, 167, 105, 166, 186, 166, 166, 186, 186, 186, 136, 157, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 166, 166, 166, 167, 166, 141, 142, 143, 144, 166, 136, 117, 117, 117, 117, 117, 117, 139, 186, 186, 166, 186, 187, 186, 186, 166, 186, 186, 187, 186, 166, 186, 186, 186, 186, 166, 186, 161, 162, 163, 164, 186, 166, 186, 105, 186, 186, 105, 186, 186, 105, 186, 186, 105, 186, 186, 105, 186, 186, 105, 186, 186, 105, 186, 186, 105, 186, 186, 105, 186, 187, 105, 167, 166, 166, 186, 186, 166, 212, 213, 157, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 186, 166, 167, 187, 186, 161, 162, 163, 164, 186, 136, 117, 117, 117, 117, 117, 117, 139, 186, 186, 188, 166, 186, 186, 186, 188, 166, 186, 186, 186, 188, 166, 186, 186, 186, 188, 166, 181, 182, 183, 184, 166, 166, 166, 101, 188, 186, 101, 188, 186, 101, 188, 186, 101, 188, 186, 101, 188, 186, 101, 188, 186, 101, 188, 186, 101, 188, 186, 101, 188, 186, 105, 187, 166, 167, 166, 186, 186, 232, 233, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 186, 186, 187, 166, 167, 181, 182, 183, 184, 166, 136, 117, 117, 117, 117, 117, 117, 139, 186, 166, 166, 166, 166, 167, 166, 166, 166, 166, 186, 166, 166, 166, 166, 186, 166, 166, 166, 201, 202, 203, 204, 166, 166, 166, 101, 166, 166, 101, 166, 166, 101, 166, 166, 101, 166, 166, 101, 212, 213, 101, 166, 166, 101, 166, 166, 101, 166, 166, 101, 166, 166, 105, 166, 166, 187, 166, 212, 213, 136, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 186, 167, 166, 166, 187, 201, 202, 203, 204, 186, 136, 117, 117, 117, 117, 117, 117, 139, 186, 186, 186, 186, 186, 187, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 221, 222, 223, 224, 186, 186, 186, 101, 186, 186, 101, 186, 186, 101, 186, 186, 101, 186, 186, 101, 232, 233, 101, 186, 212, 213, 186, 186, 101, 186, 186, 101, 212, 213, 105, 186, 186, 186, 186, 232, 233, 136, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 139, 186, 187, 186, 186, 186, 221, 222, 223, 224, 186, 136, 117, 117, 117, 117, 117, 117, 139, 212, 213, 206, 207, 206, 206, 206, 207, 206, 207, 157, 157, 157, 157, 206, 207, 206, 207, 206, 157, 157, 207, 206, 207, 206, 157, 157, 207, 206, 207, 206, 207, 157, 157, 207, 206, 207, 206, 206, 207, 206, 212, 213, 232, 233, 206, 207, 207, 206, 207, 207, 232, 233, 207, 206, 207, 212, 213, 157, 157, 157, 117, 157, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 157, 206, 207, 207, 207, 207, 207, 207, 207, 206, 207, 157, 117, 117, 117, 117, 117, 117, 139, 232, 233, 117, 117, 117, 117, 117, 117, 117, 117, 117, 157, 157, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 157, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 232, 233, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 232, 233, 157, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117],
					},
					{
						type: "tilelayer",
						name: "collisionsLayer",
						width: 160,
						height: 25,
						opacity: 1,
						data: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 4, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
					},
				],
			},
		});
		const levelMap = this.add.tilemap("levelMap_adbad958-e0fa-4083-a2bc-454b442abaf7");
		levelMap.addTilesetImage("collisions");
		levelMap.addTilesetImage("tileset");

		// jumpKey
		const jumpKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);

		// leftKey
		const leftKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.LEFT);

		// rightKey
		const rightKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.RIGHT);

		// downKey
		const downKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.DOWN);

		// upKey
		const upKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.UP);

		// background
		const background = this.add.tileSprite(0, -2, 320, 240, "background");
		background.setOrigin(0, 0);

		// middleground
		const middleground = this.add.tileSprite(0, 0, 384, 240, "middleground");
		middleground.setOrigin(0, 0);

		// mainLayer
		const mainLayer = levelMap.createLayer("mainLayer", ["tileset"], 0.5, 0.5);

		// props
		const props = this.add.layer();

		// plant_4
		const plant_4 = this.add.image(32, 192, "atlas-props", "plant");
		plant_4.setOrigin(0, 0);
		props.add(plant_4);

		// plant_5
		const plant_5 = this.add.image(368, 192, "atlas-props", "plant");
		plant_5.setOrigin(0, 0);
		props.add(plant_5);

		// plant_6
		const plant_6 = this.add.image(2400, 192, "atlas-props", "plant");
		plant_6.setOrigin(0, 0);
		props.add(plant_6);

		// plant_7
		const plant_7 = this.add.image(2432, 192, "atlas-props", "plant");
		plant_7.setOrigin(0, 0);
		props.add(plant_7);

		// plant_8
		const plant_8 = this.add.image(2288, 192, "atlas-props", "plant");
		plant_8.setOrigin(0, 0);
		props.add(plant_8);

		// plant_9
		const plant_9 = this.add.image(714, 192, "atlas-props", "plant");
		plant_9.setOrigin(0, 0);
		props.add(plant_9);

		// tree
		const tree = this.add.image(122.5, 114.69999694824219, "atlas-props", "tree");
		props.add(tree);

		// mushroom_red
		const mushroom_red = this.add.image(187.5, 178.8000030517578, "atlas-props", "mushroom-red");
		props.add(mushroom_red);

		// vine
		const vine = this.add.image(68.5, 26.5, "atlas-props", "vine");
		props.add(vine);

		// vine_1
		const vine_1 = this.add.image(420.5, 26.5, "atlas-props", "vine");
		props.add(vine_1);

		// mushroom_brown
		const mushroom_brown = this.add.image(284.5, 192.5, "atlas-props", "mushroom-brown");
		props.add(mushroom_brown);

		// tree_1
		const tree_1 = this.add.image(1920, 3.2, "atlas-props", "tree");
		tree_1.setOrigin(0, 0);
		props.add(tree_1);

		// house
		const house = this.add.image(2432.5, 125.70000076293945, "atlas-props", "house");
		props.add(house);

		// vine_2
		const vine_2 = this.add.image(800.5, 26.5, "atlas-props", "vine");
		props.add(vine_2);

		// vine_3
		const vine_3 = this.add.image(2196.5, 26.5, "atlas-props", "vine");
		props.add(vine_3);

		// mushroom_red_1
		const mushroom_red_1 = this.add.image(2315.5, 194.8000030517578, "atlas-props", "mushroom-red");
		props.add(mushroom_red_1);

		// mushroom_red_2
		const mushroom_red_2 = this.add.image(2254, 196, "atlas-props", "mushroom-red");
		mushroom_red_2.flipX = true;
		props.add(mushroom_red_2);

		// enemiesLayer
		const enemiesLayer = this.add.layer();

		// bee
		const bee = new Bee(this, 528, 160);
		enemiesLayer.add(bee);

		// bee_1
		const bee_1 = new Bee(this, 768, 159);
		enemiesLayer.add(bee_1);

		// bee_2
		const bee_2 = new Bee(this, 960, 160);
		enemiesLayer.add(bee_2);

		// bee_3
		const bee_3 = new Bee(this, 1776, 144);
		enemiesLayer.add(bee_3);

		// bee_4
		const bee_4 = new Bee(this, 2272, 144);
		enemiesLayer.add(bee_4);

		// plant
		const plant = new Plant(this, 672, 166);
		enemiesLayer.add(plant);

		// plant_1
		const plant_1 = new Plant(this, 1024, 89);
		enemiesLayer.add(plant_1);

		// plant_2
		const plant_2 = new Plant(this, 1616, 344);
		enemiesLayer.add(plant_2);

		// plant_3
		const plant_3 = new Plant(this, 1600, 122);
		plant_3.flipX = true;
		plant_3.flipY = false;
		enemiesLayer.add(plant_3);

		// slug
		const slug = new Slug(this, 192, 192);
		enemiesLayer.add(slug);

		// slug_1
		const slug_1 = new Slug(this, 288, 208);
		enemiesLayer.add(slug_1);

		// slug_4
		const slug_4 = new Slug(this, 1168, 368);
		enemiesLayer.add(slug_4);

		// slug_9
		const slug_9 = new Slug(this, 496, 32);
		enemiesLayer.add(slug_9);

		// slug_10
		const slug_10 = new Slug(this, 1488, 368);
		enemiesLayer.add(slug_10);

		// slug_12
		const slug_12 = new Slug(this, 1328, 369);
		enemiesLayer.add(slug_12);

		// slug_13
		const slug_13 = new Slug(this, 2064, 192);
		enemiesLayer.add(slug_13);

		// slug_14
		const slug_14 = new Slug(this, 2112, 192);
		enemiesLayer.add(slug_14);

		// chestLayer
		const chestLayer = this.add.layer();

		// chest
		const chest = new Chest(this, 1136, 192);
		chestLayer.add(chest);

		// chest_1
		const chest_1 = new Chest(this, 512, 384);
		chestLayer.add(chest_1);

		// lootLayer
		const lootLayer = this.add.layer();

		// starsLayer
		const starsLayer = this.add.layer();

		// star
		const star = new Star(this, 160.5, 142.8333282470703);
		starsLayer.add(star);

		// star_1
		const star_1 = new Star(this, 302.6666564941406, 63);
		starsLayer.add(star_1);

		// star_2
		const star_2 = new Star(this, 272.6666564941406, 63);
		starsLayer.add(star_2);

		// star_3
		const star_3 = new Star(this, 208, 143.1666717529297);
		starsLayer.add(star_3);

		// star_5
		const star_5 = new Star(this, 242.6666717529297, 63.16666793823242);
		starsLayer.add(star_5);

		// star_6
		const star_6 = new Star(this, 399.3333435058594, 144.5);
		starsLayer.add(star_6);

		// star_7
		const star_7 = new Star(this, 428.6666564941406, 143.8333282470703);
		starsLayer.add(star_7);

		// star_8
		const star_8 = new Star(this, 653.3333129882812, 79.83333587646484);
		starsLayer.add(star_8);

		// star_9
		const star_9 = new Star(this, 655.3333129882812, 112.5);
		starsLayer.add(star_9);

		// star_10
		const star_10 = new Star(this, 1456, 257.8333435058594);
		starsLayer.add(star_10);

		// star_11
		const star_11 = new Star(this, 1486, 257.1666564941406);
		starsLayer.add(star_11);

		// star_12
		const star_12 = new Star(this, 1516.6666259765625, 256.5);
		starsLayer.add(star_12);

		// star_13
		const star_13 = new Star(this, 1664.6666259765625, 285.8333435058594);
		starsLayer.add(star_13);

		// star_14
		const star_14 = new Star(this, 1183.3333740234375, 309.1666564941406);
		starsLayer.add(star_14);

		// star_15
		const star_15 = new Star(this, 1272.6666259765625, 311.1666564941406);
		starsLayer.add(star_15);

		// star_16
		const star_16 = new Star(this, 1367.3333740234375, 309.8333435058594);
		starsLayer.add(star_16);

		// star_17
		const star_17 = new Star(this, 1632, 79.16666412353516);
		starsLayer.add(star_17);

		// star_18
		const star_18 = new Star(this, 1664.6666259765625, 79.16666412353516);
		starsLayer.add(star_18);

		// star_19
		const star_19 = new Star(this, 1697.3333740234375, 79.83333587646484);
		starsLayer.add(star_19);

		// star_20
		const star_20 = new Star(this, 2082, 79.83333587646484);
		starsLayer.add(star_20);

		// star_21
		const star_21 = new Star(this, 2145.333251953125, 79.83333587646484);
		starsLayer.add(star_21);

		// star_22
		const star_22 = new Star(this, 2210, 79.83333587646484);
		starsLayer.add(star_22);

		// star_23
		const star_23 = new Star(this, 2322.666748046875, 191.8333282470703);
		starsLayer.add(star_23);

		// star_24
		const star_24 = new Star(this, 2286.666748046875, 192.5);
		starsLayer.add(star_24);

		// star_25
		const star_25 = new Star(this, 2351.333251953125, 191.8333282470703);
		starsLayer.add(star_25);

		// carrotsLayer
		const carrotsLayer = this.add.layer();

		// carrot
		const carrot = new Carrot(this, 936, 311);
		carrotsLayer.add(carrot);

		// carrot_1
		const carrot_1 = new Carrot(this, 766.8333129882812, 81.5);
		carrotsLayer.add(carrot_1);

		// carrot_2
		const carrot_2 = new Carrot(this, 404.5, 67);
		carrotsLayer.add(carrot_2);

		// carrot_5
		const carrot_5 = new Carrot(this, 1985.8333740234375, 48.16666793823242);
		carrotsLayer.add(carrot_5);

		// carrot_3
		const carrot_3 = new Carrot(this, 1484.6666259765625, 45.5);
		carrotsLayer.add(carrot_3);

		// player
		const player = new Player(this, 64, 160);
		this.add.existing(player);

		// rocks
		const rocks = this.add.layer();

		// rock
		const rock = this.add.image(256, 203.1999969482422, "atlas-props", "rock");
		rock.setOrigin(0, 0);
		rocks.add(rock);

		// rock_1
		const rock_1 = this.add.image(848, 187.1999969482422, "atlas-props", "rock");
		rock_1.setOrigin(0, 0);
		rocks.add(rock_1);

		// rock_2
		const rock_2 = this.add.image(1497, 72, "atlas-props", "rock");
		rock_2.setOrigin(0, 0);
		rocks.add(rock_2);

		// collisionsLayer
		const collisionsLayer = levelMap.createLayer("collisionsLayer", ["collisions"], 0.5, 0.5);
		collisionsLayer.visible = false;

		// slugZoneLayer
		const slugZoneLayer = this.add.layer();
		slugZoneLayer.visible = false;

		// collisions2
		const collisions2 = new SlugZone(this, 144, 176);
		slugZoneLayer.add(collisions2);

		// collisions
		const collisions = new SlugZone(this, 240, 176);
		slugZoneLayer.add(collisions);

		// collisions_1
		const collisions_1 = new SlugZone(this, 448, 16);
		slugZoneLayer.add(collisions_1);

		// collisions_2
		const collisions_2 = new SlugZone(this, 560, 16);
		slugZoneLayer.add(collisions_2);

		// collisions_3
		const collisions_3 = new SlugZone(this, 1104, 352);
		slugZoneLayer.add(collisions_3);

		// collisions_4
		const collisions_4 = new SlugZone(this, 1232, 352);
		slugZoneLayer.add(collisions_4);

		// collisions_5
		const collisions_5 = new SlugZone(this, 1248, 352);
		slugZoneLayer.add(collisions_5);

		// collisions_6
		const collisions_6 = new SlugZone(this, 2032, 176);
		slugZoneLayer.add(collisions_6);

		// collisions_7
		const collisions_7 = new SlugZone(this, 2208, 176);
		slugZoneLayer.add(collisions_7);

		// hudLayer
		const hudLayer = this.add.container(0, 0);

		// hud
		const hud = this.add.image(10, 11, "atlas", "hud/hud-4");
		hud.setOrigin(0, 0);
		hudLayer.add(hud);

		// scoreLabel
		const scoreLabel = this.add.text(57, 12, "", {});
		scoreLabel.text = "0";
		scoreLabel.setStyle({ align: "center", fontFamily: "VT323", fontSize: "8px" });
		hudLayer.add(scoreLabel);

		// playerVsFloor
		this.physics.add.collider(player, collisionsLayer, this.playerVsFloor, (p, t) => p.alive && t.index !== 4, this);

		// enemiesVsCollision
		this.physics.add.collider(enemiesLayer.list, collisionsLayer);

		// chestVsCollision
		this.physics.add.collider(chestLayer.list, collisionsLayer);

		// lootVsCollision
		this.physics.add.collider(lootLayer.list, collisionsLayer);

		// playerVsLadder
		this.physics.add.overlap(player, collisionsLayer, this.playerVsLadder, (p, t) => t.index === 4, this);

		// playerVsEnemies
		this.physics.add.overlap(player, enemiesLayer.list, this.playerVsEnemies, this.playerIsAlive, this);

		// playerVsCarrots
		this.physics.add.overlap(player, carrotsLayer.list, this.playerVsCarrots, this.playerIsAlive, this);

		// playerVsStar
		this.physics.add.overlap(player, starsLayer.list, this.playerVsStar, this.playerIsAlive, this);

		// playerVsChest
		this.physics.add.overlap(player, chestLayer.list, this.playerVsChest, this.playerIsAlive, this);

		// playerVsLoot
		this.physics.add.overlap(player, lootLayer.list, this.playerVsLoot, this.playerIsAlive, this);

		// slugVsZones
		this.physics.add.collider(enemiesLayer.list, slugZoneLayer.list);

		// background (components)
		new FixedToCameraComp(background);
		const backgroundParallaxComp = new ParallaxComp(background);
		backgroundParallaxComp.factor = 0.2;

		// middleground (components)
		new FixedToCameraComp(middleground);
		new ParallaxComp(middleground);

		// bee (prefab fields)
		bee.distance = 20;

		// bee_1 (prefab fields)
		bee_1.distance = 30;
		bee_1.horizontal = true;

		// bee_2 (prefab fields)
		bee_2.distance = 30;

		// bee_3 (prefab fields)
		bee_3.distance = 30;
		bee_3.horizontal = true;

		// bee_4 (prefab fields)
		bee_4.distance = 30;

		// hudLayer (components)
		new FixedToCameraComp(hudLayer);

		this.mainLayer = mainLayer;
		this.lootLayer = lootLayer;
		this.player = player;
		this.collisionsLayer = collisionsLayer;
		this.hud = hud;
		this.scoreLabel = scoreLabel;
		this.levelMap = levelMap;
		this.jumpKey = jumpKey;
		this.leftKey = leftKey;
		this.rightKey = rightKey;
		this.downKey = downKey;
		this.upKey = upKey;

		this.events.emit("scene-awake");
	}

	/** @type {Phaser.Tilemaps.TilemapLayer} */
	mainLayer;
	/** @type {Phaser.GameObjects.Layer} */
	lootLayer;
	/** @type {Player} */
	player;
	/** @type {Phaser.Tilemaps.TilemapLayer} */
	collisionsLayer;
	/** @type {Phaser.GameObjects.Image} */
	hud;
	/** @type {Phaser.GameObjects.Text} */
	scoreLabel;
	/** @type {Phaser.Tilemaps.Tilemap} */
	levelMap;
	/** @type {Phaser.Input.Keyboard.Key} */
	jumpKey;
	/** @type {Phaser.Input.Keyboard.Key} */
	leftKey;
	/** @type {Phaser.Input.Keyboard.Key} */
	rightKey;
	/** @type {Phaser.Input.Keyboard.Key} */
	downKey;
	/** @type {Phaser.Input.Keyboard.Key} */
	upKey;

	/* START-USER-CODE */

	_score = 0;

	create() {

		this.editorCreate();

		this._score = 0;

		// tilemap collisions

		this.collisionsLayer.setCollision([1, 4, 5, 8]);

		// set up collistion tiles
		this.collisionsLayer.forEachTile(tile => {

			if (tile.index === 2) {

				tile.setCollision(false, false, true, false);
			}
		});

		// camera
		this.cameras.main.setBounds(0, 0, this.mainLayer.layer.widthInPixels, this.mainLayer.layer.heightInPixels);
		this.cameras.main.startFollow(this.player, true);
	}

	playerIsAlive() {

		return this.player.alive;
	}

	/**
	 * 
	 * @param {Player} player 
	 * @param {Phaser.Tilemaps.Tile} tile 
	 */
	playerVsLadder(player, tile) {

		if (this.upKey.isDown) {

			player.onLadder = true;
		}
	}

	/**
	 * 
	 * @param {Player} player 
	 * @param {Phaser.Tilemaps.Tile} tile 
	 */
	playerVsFloor(player, tile) {

		switch (tile.index) {

			case 5:

				// kill zone
				this.sound.play("hurt");
				player.death();

				break;

			case 8:

				// exit zone
				this.scene.start("GameOver");

				break;
		}
	}

	/**
	 * 
	 * @param {Player} player 
	 * @param {LootStar} loot 
	 */
	playerVsLoot(player, loot) {

		if (loot.collectable) {

			loot.destroy();

			this.increaseScore();

			this.sound.play("star");
		}
	}

	/**
	 * 
	 * @param {Player} player 
	 * @param {Chest} chest 
	 */
	playerVsChest(player, chest) {

		if ((player.y + player.body.height * 0.5 < chest.y) && player.body.velocity.y > 0 && !chest.opened) {

			player.body.velocity.y = -100;

			chest.open();
		}
	}

	/**
	 * 
	 * @param {Player} player 
	 * @param {Phaser.GameObjects.Sprite} star 
	 */
	playerVsStar(player, star) {

		this.increaseScore();

		star.destroy();

		this.sound.play("star");
	}

	increaseScore() {

		this._score++;

		this.scoreLabel.text = this._score;
	}

	/**
	 * 
	 * @param {Player} player 
	 * @param {Carrot} carrot 
	 */
	playerVsCarrots(player, carrot) {

		carrot.destroy();

		player.increaseHealth();
	}

	/**
	 * 
	 * @param {Player} player 
	 * @param {Phaser.GameObjects.Sprite} enemy 
	 */
	playerVsEnemies(player, enemy) {

		if ((player.y + player.body.height * 0.5 < enemy.y) && player.body.velocity.y > 0) {

			enemy.destroy();

			this.add.existing(new EnemyDeath(this, enemy.x, enemy.y));

			player.smashEnemy();

		} else {

			this.player.hurt();
		}
	}

	movePlayer() {

		if (!this.player.alive) {

			this.player.play("player-hurt", true);

			return;
		}

		if (this.player.hurtFlag) {

			this.player.play("player-hurt", true);

			return;
		}

		if (this.player.onLadder) {

			this.player.play("player-climb", true);

			let vel = 30;

			if (this.downKey.isDown) {

				this.player.body.velocity.y = vel;

			} else if (this.upKey.isDown) {

				this.player.body.velocity.y = -vel;
			}

			//horizontal

			if (this.leftKey.isDown) {

				this.player.body.velocity.x = -vel;

				this.player.flipX = true;

			} else if (this.rightKey.isDown) {

				this.player.body.velocity.x = vel;
				this.player.flipX = false;

			} else {

				this.player.body.velocity.x = 0;
			}

			return;
		}

		if (this.jumpKey.isDown && this.player.body.onFloor()) {

			this.player.body.velocity.y = -200;

			this.sound.play("jump");
		}

		let vel = 100;

		if (this.leftKey.isDown) {

			this.player.body.velocity.x = -vel;

			this.moveAnimation();

			this.player.flipX = true;

		} else if (this.rightKey.isDown) {

			this.player.body.velocity.x = vel;

			this.moveAnimation();

			this.player.flipX = false;

		} else {

			this.player.body.velocity.x = 0;

			this.stillAnimation();
		}
	}

	moveAnimation() {

		if (this.player.body.velocity.y < 0) {

			this.player.play("player-jump", true);

		} else if (this.player.body.velocity.y > 0) {

			this.player.play("player-fall", true);

		} else {

			this.player.play("player-skip", true);
		}
	}

	stillAnimation() {

		if (this.player.body.velocity.y < 0) {

			this.player.play("player-jump", true);

		} else if (this.player.body.velocity.y > 0) {

			this.player.play("player-fall", true);

		} else if (this.downKey.isDown) {

			this.player.play("player-duck", true);

		} else {

			this.player.play("player-idle", true);
		}
	}

	update() {

		this.movePlayer();

		this.deathReset();

		this.updateHealthHud();
	}

	updateHealthHud() {

		this.hud.setFrame("hud/hud-" + (this.player.health + 1));
	}

	deathReset() {

		if (this.player.y > this.mainLayer.layer.heightInPixels) {

			this.scene.start("GameOver");
		}
	}

	/* END-USER-CODE */
}

/* END OF COMPILED CODE */

// You can write more code here
